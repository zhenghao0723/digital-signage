{"version":3,"sources":["screens/Dashboard.js","screens/Stations.js","screens/Contents.js","screens/Templates.js","screens/Campaigns.js","screens/Networks.js","screens/Reports.js","screens/Admin.js","screens/Error.js","screens/Navigation.js","App.js","serviceWorker.js","index.js"],"names":["Dashboard","react_default","a","createElement","Component","Stations","Contents","Templates","Campaigns","Networks","Reports","Admin","Error","Navigation","react_router_dom","to","App","screens_Navigation","react_router","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mRAYeA,mLART,OACIC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,+BAJYC,aCUTC,mLART,OACIJ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,8BAJWC,aCURE,mLART,OACIL,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,8BAJWC,aCURG,mLART,OACIN,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,+BAJYC,aCUTI,mLART,OACIP,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,+BAJYC,aCUTK,mLART,OACIR,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,8BAJWC,aCURM,mLART,OACIT,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,6BAJUC,aCUPO,mLART,OACIV,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,2BAJQC,aCULQ,mLART,OACIX,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,yCAJQC,aCkBLS,mLAfT,OACEZ,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAASC,GAAG,KAAZ,aACAd,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAASC,GAAG,aAAZ,YACAd,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAASC,GAAG,aAAZ,YACAd,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAASC,GAAG,cAAZ,aACAd,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAASC,GAAG,cAAZ,aACAd,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAASC,GAAG,aAAZ,YACAd,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAASC,GAAG,YAAZ,WACAd,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAASC,GAAG,UAAZ,iBAXaX,aCiCVY,MArBf,WACE,OACEf,EAAAC,EAAAC,cAACW,EAAA,EAAD,KACEb,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACc,EAAD,MACAhB,EAAAC,EAAAC,cAACe,EAAA,EAAD,KACEjB,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAOC,KAAK,mBAAmBC,UAAWpB,EAAWqB,OAAK,IAC1DpB,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAOC,KAAK,4BAA4BC,UAAWf,IACnDJ,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAOC,KAAK,4BAA4BC,UAAWd,IACnDL,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAOC,KAAK,6BAA6BC,UAAWb,IACpDN,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAOC,KAAK,6BAA6BC,UAAWZ,IACpDP,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAOC,KAAK,4BAA4BC,UAAWX,IACnDR,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAOC,KAAK,2BAA2BC,UAAWV,IAClDT,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAOC,KAAK,yBAAyBC,UAAWT,IAChDV,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAOE,UAAWR,QCjBRU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.cc6c14dc.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Dashboard extends Component {\r\n    render() {\r\n      return (\r\n          <div>\r\n            <h2>Dashboard</h2>\r\n          </div>\r\n      );\r\n    }\r\n}\r\n  \r\nexport default Dashboard;","import React, { Component } from 'react';\r\n\r\nclass Stations extends Component {\r\n    render() {\r\n      return (\r\n          <div>\r\n            <h2>Stations</h2>\r\n          </div>\r\n      );\r\n    }\r\n}\r\n  \r\nexport default Stations;","import React, { Component } from 'react';\r\n\r\nclass Contents extends Component {\r\n    render() {\r\n      return (\r\n          <div>\r\n            <h2>Contents</h2>\r\n          </div>\r\n      );\r\n    }\r\n}\r\n  \r\nexport default Contents;","import React, { Component } from 'react';\r\n\r\nclass Templates extends Component {\r\n    render() {\r\n      return (\r\n          <div>\r\n            <h2>Templates</h2>\r\n          </div>\r\n      );\r\n    }\r\n}\r\n  \r\nexport default Templates;","import React, { Component } from 'react';\r\n\r\nclass Campaigns extends Component {\r\n    render() {\r\n      return (\r\n          <div>\r\n            <h2>Campaigns</h2>\r\n          </div>\r\n      );\r\n    }\r\n}\r\n  \r\nexport default Campaigns;","import React, { Component } from 'react';\r\n\r\nclass Networks extends Component {\r\n    render() {\r\n      return (\r\n          <div>\r\n            <h2>Networks</h2>\r\n          </div>\r\n      );\r\n    }\r\n}\r\n  \r\nexport default Networks;","import React, { Component } from 'react';\r\n\r\nclass Reports extends Component {\r\n    render() {\r\n      return (\r\n          <div>\r\n            <h2>Reports</h2>\r\n          </div>\r\n      );\r\n    }\r\n}\r\n  \r\nexport default Reports;","import React, { Component } from 'react';\r\n\r\nclass Admin extends Component {\r\n    render() {\r\n      return (\r\n          <div>\r\n            <h2>Admin</h2>\r\n          </div>\r\n      );\r\n    }\r\n}\r\n  \r\nexport default Admin;","import React, { Component } from 'react';\r\n\r\nclass Error extends Component {\r\n    render() {\r\n      return (\r\n          <div>\r\n            <h2>Path does not exist</h2>\r\n          </div>\r\n      );\r\n    }\r\n}\r\n  \r\nexport default Error;","import React, { Component } from 'react';\r\nimport { NavLink } from 'react-router-dom'; \r\n\r\nclass Navigation extends Component {\r\n    render() {\r\n      return (\r\n        <div>\r\n            <NavLink to=\"/\">Dashboard</NavLink>\r\n            <NavLink to=\"/stations\">Stations</NavLink>\r\n            <NavLink to=\"/contents\">Contents</NavLink>\r\n            <NavLink to=\"/templates\">Templates</NavLink>\r\n            <NavLink to=\"/campaigns\">Campaigns</NavLink>\r\n            <NavLink to=\"/networks\">Networks</NavLink>\r\n            <NavLink to=\"/reports\">Reports</NavLink>\r\n            <NavLink to=\"/admin\">Admin</NavLink>\r\n        </div>\r\n      );\r\n    }\r\n}\r\n  \r\nexport default Navigation;","import React from 'react';\r\nimport './App.css';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\n\r\nimport Dashboard from \"./screens/Dashboard\";\r\nimport Stations from \"./screens/Stations\";\r\nimport Contents from \"./screens/Contents\";\r\nimport Templates from \"./screens/Templates\";\r\nimport Campaigns from \"./screens/Campaigns\";\r\nimport Networks from \"./screens/Networks\";\r\nimport Reports from \"./screens/Reports\";\r\nimport Admin from \"./screens/Admin\";\r\nimport Error from \"./screens/Error\";\r\nimport Navigation from \"./screens/Navigation\";\r\n\r\nfunction App() {\r\n  return (\r\n    <BrowserRouter>\r\n      <div>\r\n        <Navigation />\r\n        <Switch>\r\n          <Route path=\"/digital-signage\" component={Dashboard} exact />\r\n          <Route path=\"/digital-signage/stations\" component={Stations} />\r\n          <Route path=\"/digital-signage/contents\" component={Contents} />\r\n          <Route path=\"/digital-signage/templates\" component={Templates} />\r\n          <Route path=\"/digital-signage/campaigns\" component={Campaigns} />\r\n          <Route path=\"/digital-signage/networks\" component={Networks} />\r\n          <Route path=\"/digital-signage/reports\" component={Reports} />\r\n          <Route path=\"/digital-signage/admin\" component={Admin} />\r\n          <Route component={Error} />\r\n        </Switch>\r\n      </div>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}